@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using VSHCTwebApp.Data
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.AspNetCore.Components.Forms
@using System.Drawing
@using System.Drawing.Imaging
@inject IJSRuntime JSRuntime

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject IWebHostEnvironment WebHostEnvironment
@inject ILogger<Index> Logger
@inject NavigationManager NavigationManager

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert @statusClass" role="alert">
        @statusMessage
    </div>
}

<div class="row">
    <div class="col-md-6">
        <div class="text-center mb-3">
            @if (!string.IsNullOrEmpty(user?.AvatarPath))
            {
                <img src="@user.AvatarPath" class="rounded-circle" style="width: 150px; height: 150px; object-fit: cover;" alt="Avatar" />
            }
            else
            {
                <img src="/images/default-avatar.png" class="rounded-circle" style="width: 150px; height: 150px; object-fit: cover;" alt="Default Avatar" />
            }
        </div>

        <div class="mb-3">
            <InputFile @ref="inputFileReference" OnChange="OnFileChange" class="form-control d-none" accept=".jpg,.jpeg,.png" />
            <button type="button" class="btn btn-secondary" @onclick="TriggerFileInput">
                Выбрать файл
            </button>
            <div class="mt-2">
                @if (selectedFileName != null)
                {
                    <span class="text-success">
                        Выбран файл: @selectedFileName (@selectedFileSize KB)
                    </span>
                }
                else
                {
                    <span class="text-muted">Файл не выбран</span>
                }
            </div>
            <div class="form-text">Загрузите изображение для аватара (JPG, JPEG или PNG, максимум 2MB)</div>
            @if (uploadError != null)
            {
                <div class="text-danger mt-2">@uploadError</div>
            }
            <div class="mt-2">
                <button type="button" class="btn btn-primary" @onclick="UploadAvatar" disabled="@(!isFileSelected)">
                    @if(isUploading)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span>Загрузка...</span>
                    }
                    else
                    {
                        <span>Загрузить аватар</span>
                    }
                </button>
                <div class="text-muted mt-1">isFileSelected: @isFileSelected, avatarFile is null: @(avatarFile == null)</div>
            </div>
        </div>

        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="form-floating mb-3">
                <input type="text" value="@username" class="form-control" placeholder="Please choose your username." disabled />
                <label for="username" class="form-label">Username</label>
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Please enter your phone number." />
                <label for="phone-number" class="form-label">Phone number</label>
                <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Competitions" class="form-control" placeholder="Please enter your competitions." />
                <label for="competitions" class="form-label">Competitions</label>
                <ValidationMessage For="() => Input.Competitions" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Ideas" class="form-control" placeholder="Please enter your ideas." />
                <label for="ideas" class="form-label">Ideas</label>
                <ValidationMessage For="() => Input.Ideas" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputTextArea @bind-Value="Input.AboutMe" class="form-control" placeholder="Please tell about yourself." style="height: 100px;" />
                <label for="about-me" class="form-label">About me</label>
                <ValidationMessage For="() => Input.AboutMe" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
        </EditForm>
    </div>
</div>

@code {
    private ApplicationUser user = default!;
    private string? username;
    private string? phoneNumber;
    private string? competitions;
    private string? ideas;
    private string? aboutMe;
    private IBrowserFile? avatarFile;
    private string? uploadError;
    private string? statusMessage;
    private string statusClass = "alert-success";
    private bool isFileSelected;
    private bool isUploading;
    private string? selectedFileName;
    private long? selectedFileSize;
    private InputFile? inputFileReference;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            user = await UserAccessor.GetRequiredUserAsync(HttpContext);
            username = await UserManager.GetUserNameAsync(user);
            phoneNumber = await UserManager.GetPhoneNumberAsync(user);
            competitions = user.Competitions;
            ideas = user.Ideas;
            aboutMe = user.AboutMe;

            Input.PhoneNumber ??= phoneNumber;
            Input.Competitions ??= competitions;
            Input.Ideas ??= ideas;
            Input.AboutMe ??= aboutMe;
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error in OnInitializedAsync: {ex.Message}");
            ShowError("Ошибка при загрузке профиля");
        }
    }

    private void ShowSuccess(string message)
    {
        statusMessage = message;
        statusClass = "alert-success";
        StateHasChanged();
    }

    private void ShowError(string message)
    {
        statusMessage = message;
        statusClass = "alert-danger";
        StateHasChanged();
    }

    private async Task OnFileChange(InputFileChangeEventArgs e)
    {
        try
        {
            Logger.LogInformation("OnFileChange started");
            Logger.LogInformation($"Files count: {e.FileCount}");
            
            // Получаем первый файл из списка
            var file = e.GetMultipleFiles(1).FirstOrDefault();
            
            if (file == null)
            {
                Logger.LogWarning("No file selected");
                ResetFileSelection();
                return;
            }

            Logger.LogInformation($"File name: {file.Name}");
            Logger.LogInformation($"File size: {file.Size}");
            Logger.LogInformation($"Content type: {file.ContentType}");
            
            var fileExtension = Path.GetExtension(file.Name).ToLower();
            if (!new[] { ".jpg", ".jpeg", ".png" }.Contains(fileExtension))
            {
                Logger.LogWarning($"Invalid file extension: {fileExtension}");
                uploadError = "Допустимы только JPG/JPEG/PNG";
                ResetFileSelection();
                return;
            }

            if (file.Size > 2 * 1024 * 1024) // 2MB
            {
                Logger.LogWarning($"File too large: {file.Size} bytes");
                uploadError = "Размер файла не должен превышать 2MB";
                ResetFileSelection();
                return;
            }

            // Устанавливаем значения переменных
            avatarFile = file;
            selectedFileName = file.Name;
            selectedFileSize = file.Size / 1024; // Convert to KB
            isFileSelected = true;
            uploadError = null;

            Logger.LogInformation($"File selected successfully. isFileSelected: {isFileSelected}, avatarFile is null: {avatarFile == null}");
            
            // Вызываем StateHasChanged для обновления UI
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error in OnFileChange: {ex.Message}");
            Logger.LogError($"Stack trace: {ex.StackTrace}");
            ShowError("Ошибка при выборе файла");
            ResetFileSelection();
        }
    }

    private void ResetFileSelection()
    {
        try
        {
            Logger.LogInformation("Resetting file selection");
            avatarFile = null;
            selectedFileName = null;
            selectedFileSize = null;
            isFileSelected = false;
            uploadError = null;
            InvokeAsync(StateHasChanged);
            Logger.LogInformation($"File selection reset. isFileSelected: {isFileSelected}, avatarFile is null: {avatarFile == null}");
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error in ResetFileSelection: {ex.Message}");
        }
    }

    private async Task UploadAvatar()
    {
        try
        {
            Logger.LogInformation("UploadAvatar started");
            Logger.LogInformation($"Current state - isFileSelected: {isFileSelected}, avatarFile is null: {avatarFile == null}");

            if (!isFileSelected || avatarFile == null)
            {
                Logger.LogWarning("No file selected for upload");
                ShowError("Файл не выбран");
                return;
            }

            isUploading = true;
            await InvokeAsync(StateHasChanged);

            var fileExtension = Path.GetExtension(avatarFile.Name).ToLower();
            var fileName = $"{user.Id}{fileExtension}";
            var imagesPath = Path.Combine(WebHostEnvironment.WebRootPath, "images");
            var avatarsPath = Path.Combine(imagesPath, "avatars");

            // Проверяем и создаем директории
            try
            {
                if (!Directory.Exists(imagesPath))
                {
                    Directory.CreateDirectory(imagesPath);
                }
                if (!Directory.Exists(avatarsPath))
                {
                    Directory.CreateDirectory(avatarsPath);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError($"Error creating directories: {ex.Message}");
                ShowError("Ошибка при создании директорий");
                return;
            }

            var filePath = Path.Combine(avatarsPath, fileName);
            Logger.LogInformation($"Saving file to: {filePath}");

            // Проверяем, что файл действительно является изображением
            try
            {
                using var stream = avatarFile.OpenReadStream(maxAllowedSize: 2 * 1024 * 1024);
                using var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                memoryStream.Position = 0;

                using var image = Image.FromStream(memoryStream);
                if (image.Width <= 0 || image.Height <= 0)
                {
                    throw new Exception("Invalid image dimensions");
                }

                // Сохраняем файл
                memoryStream.Position = 0;
                using (var fileStream = new FileStream(filePath, FileMode.Create, FileAccess.Write))
                {
                    await memoryStream.CopyToAsync(fileStream);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError($"Error validating or saving image: {ex.Message}");
                ShowError("Выбранный файл не является допустимым изображением");
                return;
            }

            // Обновляем путь к аватару в базе данных
            var oldAvatarPath = user.AvatarPath;
            user.AvatarPath = $"/images/avatars/{fileName}";
            var result = await UserManager.UpdateAsync(user);
            
            if (result.Succeeded)
            {
                Logger.LogInformation("Avatar uploaded and user updated successfully");
                await SignInManager.RefreshSignInAsync(user);
                
                // Удаляем старый файл аватара, если он существует
                if (!string.IsNullOrEmpty(oldAvatarPath))
                {
                    var oldFilePath = Path.Combine(WebHostEnvironment.WebRootPath, oldAvatarPath.TrimStart('/').Replace('/', '\\'));
                    try
                    {
                        if (File.Exists(oldFilePath))
                        {
                            File.Delete(oldFilePath);
                            Logger.LogInformation($"Old avatar file deleted: {oldFilePath}");
                        }
                    }
                    catch (Exception ex)
                    {
                        Logger.LogWarning($"Failed to delete old avatar file: {ex.Message}");
                    }
                }
                
                ShowSuccess("Аватар успешно обновлен");
            }
            else
            {
                var errors = string.Join(", ", result.Errors.Select(e => e.Description));
                Logger.LogError($"Failed to update user: {errors}");
                
                // Удаляем загруженный файл, так как обновление пользователя не удалось
                try
                {
                    if (File.Exists(filePath))
                    {
                        File.Delete(filePath);
                        Logger.LogInformation($"Deleted uploaded file after failed user update: {filePath}");
                    }
                }
                catch (Exception ex)
                {
                    Logger.LogWarning($"Failed to delete uploaded file: {ex.Message}");
                }
                
                ShowError("Ошибка при обновлении профиля");
            }

            // Сбрасываем состояние выбора файла
            ResetFileSelection();
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error uploading avatar: {ex.Message}");
            Logger.LogError($"Stack trace: {ex.StackTrace}");
            ShowError("Ошибка при загрузке аватара");
        }
        finally
        {
            isUploading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task OnValidSubmitAsync()
    {
        try
        {
            user.PhoneNumber = Input.PhoneNumber;
            user.Competitions = Input.Competitions;
            user.Ideas = Input.Ideas;
            user.AboutMe = Input.AboutMe;

            var result = await UserManager.UpdateAsync(user);
            if (result.Succeeded)
            {
                await SignInManager.RefreshSignInAsync(user);
                ShowSuccess("Профиль успешно обновлен");
            }
            else
            {
                var errors = string.Join(", ", result.Errors.Select(e => e.Description));
                Logger.LogError($"Error updating user: {errors}");
                ShowError("Ошибка при обновлении профиля");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error in OnValidSubmitAsync: {ex.Message}");
            Logger.LogError($"Stack trace: {ex.StackTrace}");
            ShowError("Ошибка при обновлении профиля");
        }
    }

    private async Task TriggerFileInput()
    {
        try
        {
            if (inputFileReference != null)
            {
                await JSRuntime.InvokeVoidAsync("triggerClick", inputFileReference.Element);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error triggering file input: {ex.Message}");
        }
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }

        [Display(Name = "Competitions")]
        public string? Competitions { get; set; }

        [Display(Name = "Ideas")]
        public string? Ideas { get; set; }

        [Display(Name = "About me")]
        public string? AboutMe { get; set; }
    }
}

